generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(250)
  email    String @unique @db.VarChar(250)
  password String

  supervisor    Supervisor?
  roomQuestions UserRoomQuestion[]

  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("update_at")
  deletedAt DateTime?  @map("deleted_at")
  userRooms UserRoom[]

  @@map("users")
}

model Supervisor {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique @map("user_id")
  rooms  Room[]

  @@map("supervisor")
}

model QuestionCategory {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(50)
  questions Question[]

  @@map("question_category")
}

model Question {
  id                Int                @id @default(autoincrement())
  name              String             @unique @db.VarChar(50)
  description       String             @db.VarChar(1024)
  typeResult        String             @map("type_result") @db.VarChar(50)
  descriptionResult String             @map("description_result") @db.VarChar(250)
  params            Json
  tests             Json
  documentMarkdown  String?            @map("document_markdown") @db.MediumText
  userRoomQuestions UserRoomQuestion[]
  rooms             Room[]
  category          QuestionCategory   @relation(fields: [categoryId], references: [id])
  categoryId        Int                @map("category_id")

  @@map("question")
}

model UserRoom {
  user   User    @relation(fields: [userId], references: [id])
  userId Int
  room   Room    @relation(fields: [roomId], references: [id])
  roomId Int
  active Boolean @default(true)

  @@id([userId, roomId])
  @@map("user_room")
}

model Room {
  id                Int                @id @default(autoincrement())
  name              String             @unique @db.VarChar(50)
  supervisors       Supervisor[]
  userRoomQuestions UserRoomQuestion[]
  questions         Question[]
  userRooms         UserRoom[]
  active            Boolean            @default(true)

  @@map("room")
}

model Language {
  id                Int                @id @default(autoincrement())
  name              String             @unique @db.VarChar(50)
  userRoomQuestions UserRoomQuestion[]

  @@map("language")
}

model UserRoomQuestion {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int      @map("question_id")
  room       Room     @relation(fields: [roomId], references: [id])
  roomId     Int      @map("room_id")
  language   Language @relation(fields: [languageId], references: [id])
  languageId Int      @map("language_id")
  code       String   @db.MediumText
  passed     Boolean  @default(false)

  @@id([userId, questionId, roomId, languageId])
  @@map("user_room_question")
}
